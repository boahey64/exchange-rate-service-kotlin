# set heap size
### -OmitStackTraceInFastThrow: disallow the jvm to surpresses stack traces for performance reasons; you would only see java.lang.nullpointerexception but not the trace
### Xmx & Xms: set max and initial heap size
JAVA_OPTS="-XX:-OmitStackTraceInFastThrow -Xmx1g -Xms1g"

# use pseudo-random entropy for faster response times
JAVA_OPTS=$JAVA_OPTS" -Djava.security.egd=file:/dev/./urandom"

# configure garbage collector
### DisableExplicitGC: disallow System.gc
### UseG1GC; use the G1 garbage collector; recommended for heaps > 4GB
### MaxGCPauseMillis: ask the GC to never take longer than the given value for a run; this is not guaranteed though
JAVA_OPTS=$JAVA_OPTS" -XX:+DisableExplicitGC -XX:+UseG1GC -XX:MaxGCPauseMillis=500"

# enable JMX
JAVA_OPTS=$JAVA_OPTS" -Dcom.sun.management.jmxremote.port=3333 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.password.file={{ application_home_dir }}/jmxremote.password -Dcom.sun.management.jmxremote.access.file={{ application_home_dir }}/jmxremote.access"

# enable debug mode
JAVA_OPTS=$JAVA_OPTS" -Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"

# im Falle eines OutOfMemory Heapdump erzeugen und die VM beenden, wird dann von systemd neu gestartet.
JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError -XX:+CrashOnOutOfMemoryError"
